server:
  port: ${PORT:8095}
spring:
  application:
    # the name of the application represents the global identifier of this microservice.
    name: catalogue-service-srdc
    url: http://localhost:8095
  cloud:
    config:
      uri: ${CONFIG_SERVER_URI:http://localhost:8888}
      # failFast is disabled per default, so that the service can start standalone without config server.
      # failFast should be enabled in production environments.
      # it can be set via an environment variable or the config server
      failFast: ${CONFIG_SERVER_FAILFAST:false}
    discovery:
      # by disabling the service discovery the application/service can be started in "standalone mode".
      # service discovery is disabled by default and should be enabled (set to true) for the "cloud mode".
      # it can be set via an environment variable or the config server
      enabled: ${discovery.enabled:${DISCOVERY_ENABLED:false}}
  datasource:
    ubldb:
      url: jdbc:postgresql://${UBL_DB_HOST:localhost}:${UBL_DB_HOST_PORT:5432}/${UBL_DB_NAME:ubldb}?currentSchema=public
      username: ${UBL_DB_USERNAME:postgres}
      password: ${UBL_DB_PASSWORD:nimble}
      driver_class: org.postgresql.Driver
    binarycontentdb:
      url: jdbc:postgresql://${BINARY_CONTENT_DB_HOST:localhost}:${BINARY_CONTENT_DB_PORT:5432}/${BINARY_CONTENT_DB_NAME:binarycontentdb}?currentSchema=public
      username: ${BINARY_CONTENT_DB_USERNAME:postgres}
      password: ${BINARY_CONTENT_DB_PASSWORD:nimble}
      driver_class: org.postgresql.Driver
    tomcat:
      initial-size: 3
      test-while-idle: true
      time-between-eviction-runs-millis: 600000
      min-evictable-idle-time-millis: 3600000
    maxActive: 10
    maxIdle: 3
    minIdle: 3
  jackson:
    mapper:
      PROPAGATE_TRANSIENT_MARKER: true
  http:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: catalogue-service${KAFKA_CONSUMER_GROUP_ID_SUFFIX:}
    properties:
      sasl:
        jaas:
          config: ${KAFKA_JAAS_CONFIG}

logstash:
  uri: ${LOGSTASH_URI:localhost:5000}

#### c3p0 database connection pool configurations
com:
  mchange:
    v2:
      c3p0:
        impl:
          DefaultConnectionTester:
            querylessTestRunner: SWITCH
      log:
        MLog: slf4j

persistence:
  solr:
    url: ${SOLR_URL:http://nimble-staging.salzburgresearch.at/marmotta/solr/}
    properties-index: ${PROPERTIES_INDEX:prop_trial}
  syncdb:
    #### Postgres Configs
    driver: org.postgresql.Driver
    connection:
      url: jdbc:postgresql://${SYNC_DB_HOST:localhost}:${SYNC_DB_HOST_PORT:5432}/${SYNC_DB_NAME:catalogsyncdb}?currentSchema=public
    username: ${SYNC_DB_USERNAME:postgres}
    password: ${SYNC_DB_PASSWORD:nimble}
    update_check_interval: 10000

  categorydb:
    driver: org.postgresql.Driver
    connection:
      url: jdbc:postgresql://${CATEGORY_DB_HOST}:${CATEGORY_DB_PORT}/${CATEGORY_DB_NAME}
    username: ${CATEGORY_DB_USERNAME}
    password: ${CATEGORY_DB_PASSWORD}
    schema: public

  marmotta:
    sync: true
    url: ${MARMOTTA_URL:http://nimble-staging.salzburgresearch.at/marmotta}

  orm:
    ubl:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: false
        hbm2ddl:
          auto: update
        cache:
          provider_class: org.hibernate.cache.HashtableCacheProvider
        jdbc:
          batch_size: 10
        use_sql_comments: true
        transaction:
          factory_class: org.hibernate.transaction.JDBCTransactionFactory
        current_session_context_class: thread
        #TODO: below configuration is quite inefficient as it uses a db connection each time a lazy list is initialized
        enable_lazy_load_no_trans: true
        event:
          merge:
            entity_copy_observer: allow

    modaml:
      hibernate:
        connection:
          url: jdbc:h2:file://${user.home}/nimble/modaml;AUTO_SERVER=TRUE;MVCC=TRUE;AUTO_RECONNECT=TRUE;DB_CLOSE_DELAY=10;INIT=create schema IF NOT EXISTS APPS
          username: sa
          password:
          driver_class: org.h2.Driver
        dialect: org.hibernate.dialect.H2Dialect
        show_sql: false
        hbm2ddl:
          auto: update
        cache:
          provider_class: org.hibernate.cache.HashtableCacheProvider
        jdbc:
          batch_size: 0
        c3p0:
          acquire_increment: 2
          initialPoolSize: 2
          max_size: 10
          min_size: 2
          maxStatementsPerConnection: 2
          acquireRetryAttempts: 10
          acquireRetryDelay: 100
          numHelperThreads: 10
          idle_test_period: 600
        use_sql_comments: true
        transaction:
          factory_class: org.hibernate.transaction.JDBCTransactionFactory
        current_session_context_class: thread
        enable_lazy_load_no_trans: true
        event:
          merge:
            entity_copy_observer: allow
security:
  oauth2:
    authorization:
      check-token-access:

nimble:
  binary-content:
    url: ${BINARY_CONTENT_URL}
  identity:
    url: ${IDENTITY_SERVICE_URL}
  trust:
    url: ${TRUST_SERVICE_URL:http://nimble-staging.salzburgresearch.at/trust}
  kafka:
    topics:
      companyUpdates: ${KAFKA_TOPIC_COMPANY_UPDATES:company-updates}
      trustScoreUpdates: ${KAFKA_TOPIC_TRUST_SCORE_UPDATES:trust-score-updates}

################################################################################################
################################## KUBERNETES CONFIG ###########################################
################################################################################################

---

spring:
  profiles: k8s

persistence:
  categorydb:
    driver: org.postgresql.Driver
    connection:
      url: # set in eu.nimble.service.catalogue.config.CatalogueServiceConfig
    username: # set in eu.nimble.service.catalogue.config.CatalogueServiceConfig
    password: # set in eu.nimble.service.catalogue.config.CatalogueServiceConfig
    bluemix:
      credentials_json: ${BLUEMIX_CATEGORY_DB_JSON:}
  orm:
    ubl:
      hibernate:
        connection:
          url: #set in eu.nimble.utility.config.PersistenceConfig
          username: #set in eu.nimble.utility.config.PersistenceConfig
          password: #set in eu.nimble.utility.config.PersistenceConfig
          driver_class: org.postgresql.Driver
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: false
        hbm2ddl:
          auto: update
        cache:
          provider_class: org.hibernate.cache.HashtableCacheProvider
        jdbc:
          batch_size: 0
        c3p0:
          acquire_increment: 5
          initialPoolSize: 5
          max_size: 25
          min_size: 5
          maxStatementsPerConnection: 5
          acquireRetryAttempts: 10
          acquireRetryDelay: 100
          numHelperThreads: 10
          idle_test_period: 600
        use_sql_comments: true
        transaction:
          factory_class: org.hibernate.transaction.JDBCTransactionFactory
        current_session_context_class: thread
        event:
          merge:
            entity_copy_observer: allow
      bluemix:
        credentials_json: ${BLUEMIX_UBL_DB_JSON:}
    modaml:
      hibernate:
        connection:
          url: #set in eu.nimble.utility.config.PersistenceConfig
          username: #set in eu.nimble.utility.config.PersistenceConfig
          password: #set in eu.nimble.utility.config.PersistenceConfig
          driver_class: org.postgresql.Driver
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: false
        hbm2ddl:
          auto: update
        cache:
          provider_class: org.hibernate.cache.HashtableCacheProvider
        jdbc:
          batch_size: 0
        c3p0:
          acquire_increment: 2
          initialPoolSize: 2
          max_size: 10
          min_size: 2
          maxStatementsPerConnection: 2
          acquireRetryAttempts: 10
          acquireRetryDelay: 100
          numHelperThreads: 10
          idle_test_period: 600
        use_sql_comments: true
        transaction:
          factory_class: org.hibernate.transaction.JDBCTransactionFactory
        current_session_context_class: thread
        event:
          merge:
            entity_copy_observer: allow
      bluemix:
        credentials_json: ${BLUEMIX_MODAML_DB_JSON:}


################################################################################################
################################### LOCAL DEV CONFIG ###########################################
################################################################################################

---

spring:
  profiles: local_dev
  datasource:
    ubldb:
      url: jdbc:h2:mem:db3;AUTO_RECONNECT=TRUE;DB_CLOSE_DELAY=-1;INIT=create schema IF NOT EXISTS APPS
      username: sa
      password:
      driver_class: org.h2.Driver
    binarycontentdb:
      url: jdbc:h2:mem:db2;AUTO_RECONNECT=TRUE;DB_CLOSE_DELAY=-1;INIT=create schema IF NOT EXISTS APPS
      username: sa
      password:
      driver_class: org.h2.Driver
persistence:
  syncdb:
    driver: org.h2.Driver
    connection:
      url: jdbc:h2:mem:db;AUTO_RECONNECT=TRUE;DB_CLOSE_DELAY=-1;INIT=create schema IF NOT EXISTS APPS
    username: sa
    password:
  orm:
    ubl:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
  marmotta:
    sync: false

nimble:
  identity:
    url: ${IDENTITY_URL:localhost:9096}
  test-token: ${NIMBLE_TEST_TOKEN}

