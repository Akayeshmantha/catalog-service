# Example OpenAPI spec using YAML
# Be aware that YAML has indentation based scoping.
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md
# Generate client & server code stubs using http://editor.swagger.io/#/
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.1"
  title: Catalogue Service API

# Describe your paths here
paths:
  # This is the version path endpoint.
  /catalogue/{partyId}/default:
    get:
      operationId: getDefaultCatalogue
      summary: Get default catalogue for party
      description: Retrieves the default catalgoue for the specified party. The catalague is supposed to have and ID field with "default" value and be compliant with UBL standard.
      produces:
      - application/json
      parameters:
      - in: path
        name: partyId
        description: Identifier of the party
        required: true
        type: string
      responses:
        200:
          description: Default the default catalogue for the specified party
        204:
          description: No default catalogue exists for the specified party
  /catalogue/{standard}:
    post:
      operationId: addXMLCatalogue
      summary: Add catalogue
      description: Adds the catalogue represented in XML format. The serialized catalogue should be compliant with the specified standard
      consumes: [application/json, application/xml]
      produces: [application/json, application/xml]
      parameters:
      - in: path
        name: standard
        required: true
      - in: body
        name: serializedCatalogue
        required: true
      responses:
        201:
          description: Saved catalogue is returned
        400:
          description: Invalid content type header or invalid standard
    put:
      operationId: updateJSONCatalogue
      summary: Update JSON catalogue
      description: Updates the catalogue represented in JSON serialization. The serialization should be compliant with the default standard, which is UBL
      consumes: [application/json]
      produces: [application/json]
      parameters:
      - in: body
        name: catalogueJson
        required: true
      responses:
        304:
          description: Updated catalogue is returned
        400:
          description: Invalid standard or invalid catalogue serialization
        501:
          description: An unsupported standard is provided
  /catalogue/{standard}/{uuid}:
    get:
      operationId: getCatalogue
      summary: Returns the catalogue with the given standard and uuid
      description: Retrieves the catalogue for the given standard and uuid.
      produces:
      - application/json
      parameters:
      - in: path
        name: standard
        description: Standard of the requested catalogue
        required: true
        type: string
      - in: path
        name: uuid
        description: Identifier of the catalogue
        required: true
        type: string
      responses:
        200:
          description: The catalogue specified with the uuid is returned
        204:
          description: No catalogue exists for the given uuid
        400:
          description: Invalid standard
    delete:
      operationId: deleteCatalogue
      summary: Delete catalogue
      description: Deletes the catalogue for the given standard and uuid.
      parameters:
      - in: path
        name: standard
        description: Standard of the catalogue to be deleted
        required: true
        type: string
      - in: path
        name: uuid
        description: Identifier of the catalogue to be deleted
        required: true
        type: string
      responses:
        200:
          description: Catalogue deleted, if one exists
        400:
          description: Invalid standard
  /catalogue/template:
    get:
      operationId: downloadTemplate
      summary: Generate template
      description: Generates an excel-based template for the specified categories. Category ids and taxonomy ids must be provided in comma separated manner and they must have the same number of elements. Taxonomy id must be provided such that they specify the taxonomies including the specified categories.
      produces:
      - application/octet-stream
      parameters:
      - in: query
        name: categoryIds
        description: Comma separated category ids. Example "http://www.aidimme.es/FurnitureSectorOntology.owl#MDFBoard,0173-1#01-ACH237#011"
        required: false
        type: string
      - in: query
        name: taxonomyIds
        description: Comma separated taxonomy ids. Example "FurnitureOntology,eClass"
        required: false
        type: string
      responses:
        200:
          description: Returned the generated template
  /catalogue/template/upload:
    post:
      operationId: uploadTemplate
      summary: Upload template
      description: Adds the catalogue specified with the provided template. The created catalogue is compliant with the default standard, which is UBL. If there is a published catalogue already, the type of update is realized according to the update mode. There are two update modes: append and replace. In the former mode, if some of the products were already published, they are replaced with the new ones; furthermore, the brand new ones are appended to the existing product list. In the latter mode, all previously published products are deleted, the new list of products is set as it is.
      consumes: [multipart/form-data]
      parameters:
      - in: formData
        name: file
        description: Filled in excel-based template
        required: true
        type: file
      - in: query
        name: uploadMode
        description: Upload mode. The default mode is append.
        required: false
        type: string
      - in: query
        name: partyId
        description: Identifier of the party submitting the template
        required: false
        type: string
      - in: query
        name: partyName
        description: Name of the party submitting the template
        required: false
        type: string
      responses:
        201:
          description: Returned the generated template
  /catalogue/image/upload:
    post:
      operationId: uploadImages
      summary: Upload images for products
      description: Adds the images provided in the package object to relevant products. Each file in the package must start with the manufacturer item identification of the product for which the image is provided. Otherwise, the image would be ignored.
      consumes: [multipart/form-data]
      parameters:
      - in: formData
        name: package
        description: The package compressed as a Zip file, including the images
        required: true
        type: file
      - in: query
        name: catalogueUuid
        description: Unique identifier of the catalogue including the products for which the images are provided
        required: true
        type: string
      responses:
        200:
          description: Added images to products
  /catalogue/standards:
    get:
      operationId: getSupportedStandards
      summary: Get supported standards
      description: Returns the list of supported standards
      responses:
        200:
          description: Supported standards returned
  /catalogue/{catalogueUuid}/catalogueline:
    post:
      operationId: addCatalogueLine
      summary: Add catalogue line
      description: Adds the provided catalogue line
      consumes: [application/json]
      produces: [application/json]
      parameters:
      - in: path
        name: catalogueUuid
        description: Unique identifier of the catalogue to which the provided catalogue line will be added
        required: true
        type: string
      responses:
        201:
          description: Returned created catalogue line
        400:
          description: Failed to parse the provided catalogue line
    put:
      operationId: updateCatalogueLine
      summary: Update catalogue line
      description: Adds the provided catalogue line
      consumes: [application/json]
      produces: [application/json]
      parameters:
      - in: path
        name: catalogueUuid
        description: Unique identifier of the catalogue containing including the provided catalogue line
        required: true
        type: string
      responses:
        200:
          description: Returned updated catalogue line
        400:
          description: Failed to parse the provided catalogue line
  /catalogue/{catalogueUuid}/catalogueline/{lineId}:
    get:
      operationId: getCatalogueLine
      summary: Get catalogue line
      description: Retrieves the catalogue line specified with the lineId parameter
      produces: [application/json]
      parameters:
      - in: path
        name: catalogueUuid
        description: Unique identifier of the catalogue including the requested catalogue line
        required: true
        type: string
      - in: path
        name: lineId
        description: Identifier of the catalogue line
        required: true
        type: string
      responses:
        200:
          description: Returned requested catalogue line
        204:
          description: There does not exist a catalogue line for the given parameters
    delete:
      operationId: deleteCatalogueLine
      summary: Delete catalogue line
      description: Deletes the specified catalogue line, if exists
      parameters:
      - in: path
        name: catalogueUuid
        description: Unique identifier of the catalogue including the catalogue line to be deleted
        required: true
        type: string
      - in: path
        name: lineId
        description: Identifier of the catalogue line to be deleted
        required: true
        type: string
      responses:
        200:
          description: Deleted catalogue line
  /catalogue/category:
    get:
      operationId: getCategories
      summary: Get categories
      description: Retrieves a list of categories. This method takes either a list of names or a list (category id/taxonomy id) pairs. When the category names are provided, they are looked for in all managed taxonomies. For the other option, (i.e. get by id option) the taxonomy id is already provided along with the category id. See the examples in parameter definitions.
      produces: [application/json]
      parameters:
      - in: query
        name: categoryNames
        description: List of names. Example "wood, mdf"
        required: false
        type: string
      - in: query
        name: taxonomyIds
        description: List of taxonomy ids. IDs must indicate the taxonomies containing the corresponding category in the categoryIds parameter. Example "eClass, eClass"
        required: false
        type: string
      - in: query
        name: categoryIds
        description: List of category ids. Example "0173-1#01-BAC439#012,0173-1#01-AJZ694#013"
        required: false
        type: string
      responses:
        200:
          description: Returned categories matched with the specified parameters
        400:
          description: None of the category names or (taxonomyId/categoryId) pairs are provided; or number of elements in taxonomy id and category id lists do not match
  /catalogue/category/taxonomies:
    get:
      operationId: getAvailableTaxonomies
      summary: Get available taxonomies
      description: Retrieves the identifiers of the available product category taxonomies
      produces: [application/json]
      responses:
        200:
          description: Returned available taxonomy ids
  /catalogue/category/{taxonomyId}/{categoryId}/tree:
      get:
        operationId: getCategoryTree
        produces: [application/json]
        parameters:
        - in: path
          name: taxonomyId
          required: true
          type: string
        - in: path
          name: categoryId
          required: true
          type: string
  /unit-lists:
      get:
        operationId: getAllUnitList
        produces: [application/json]
      post:
        operationId: addUnitList
        produces: [application/json]
        parameters:
        - in: query
          name: unitListId
          required: true
          type: string
        - in: query
          name: units
          required: true
          type: string

  /unit-lists/{unitListId}:
      get:
        operationId: getValues
        produces: [application/json]
        parameters:
        - in: path
          name: unitListId
          required: true
          type: string
      patch:
        operationId: addUnitToList
        produces: [application/json]
        parameters:
                - in: path
                  name: unitListId
                  required: true
                  type: string
                - in: query
                  name: unit
                  required: true
                  type: string
  /unit-lists/{unitListId}/unit/{unit}:
      delete:
        operationId: deleteUnitFromList
        produces: [application/json]
        paraneter:
                - in: path
                  name: unitListId
                  required: true
                  type: string
                - in: path
                  name: unit
                  required: true
                  type: string
